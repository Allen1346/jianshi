buildscript {
  repositories {
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    // These docs use an open ended version so that our plugin
    // can be updated quickly in response to Android tooling updates

    // We recommend changing it to the latest version from our changelog:
    // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
    classpath 'io.fabric.tools:gradle:1.+'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


repositories {
  maven { url 'https://maven.fabric.io/public' }
  google()
}

def versionMajor = 2
def versionMinor = 2
def versionPatch = 0

def baseVersionCode = versionMajor * 100 + versionMinor * 10 + versionPatch
def baseVersionName = versionMajor + '.' + versionMinor + '.' + versionPatch

def port = 80

android {
  compileSdkVersion 26
  buildToolsVersion '26.0.1'

  defaultConfig {
    applicationId "com.wingjay.android.jianshi"
    minSdkVersion 14
    targetSdkVersion 26
    versionCode baseVersionCode
    versionName "${baseVersionName}"

  }
  buildTypes {
    release {
      minifyEnabled true // enable proguard
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      buildConfigField "String", "BASE_URL", '"http://jianshi.wingjay.com/"'
    }
    debug {
      debuggable true
      minifyEnabled false
      signingConfig signingConfigs.debug
      // Replace BASE_URL below with your self server url.
//      buildConfigField "String", "BASE_URL", '"http://localhost:80"'
      buildConfigField "String", "BASE_URL", '"http://' + getLocalIp("en0") + ':' + port + '/"'
      applicationIdSuffix '.debug'
    }
  }
  packagingOptions {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
  }

  signingConfigs {
    debug {
      storeFile file('jianshi_dev.jks')
      storePassword 'jianshi'
      keyAlias 'jianshidev'
      keyPassword 'jianshi'
    }
  }
}

def supportLibVersion = '26.0.2'
def dbflow_version = "3.1.1"

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation "com.android.support:appcompat-v7:${supportLibVersion}"
  implementation "com.android.support:recyclerview-v7:${supportLibVersion}"
  implementation 'joda-time:joda-time:2.3'
  implementation 'com.jakewharton:butterknife:6.0.0'
  implementation 'com.android.support.constraint:constraint-layout:1.0.2'
  annotationProcessor 'com.jakewharton:butterknife:6.0.0'
  implementation 'com.facebook.stetho:stetho:1.2.0'
  implementation('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
    transitive = true
  }
  // apt command comes from the android-apt plugin
  annotationProcessor 'com.google.dagger:dagger-compiler:2.11'
  implementation 'com.google.dagger:dagger:2.11'
  compileOnly 'javax.annotation:jsr250-api:1.0'
  //square
  implementation 'com.squareup.okhttp3:okhttp:3.4.1'
  implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
  implementation 'com.squareup.retrofit2:retrofit:2.1.0'
  implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
  implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
  implementation 'com.facebook.stetho:stetho:1.3.1'
  implementation 'com.facebook.stetho:stetho-okhttp3:1.3.1'
  implementation 'io.reactivex:rxandroid:1.2.1'
  // Because RxAndroid releases are few and far between, it is recommended you also
  // explicitly depend on RxJava's latest version for bug fixes and new features.
  implementation 'io.reactivex:rxjava:1.1.6'
  //DBFlow
  annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
  implementation "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
  implementation "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
  implementation 'com.jakewharton.timber:timber:4.3.1'
  //Picasso
  implementation 'com.squareup.picasso:picasso:2.5.2'

  implementation 'org.greenrobot:eventbus:3.0.0'

  //font
  implementation 'uk.co.chrisjenx:calligraphy:2.2.0'
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

// Get the ip address by interface name
static def getLocalIp(String interfaceName) {
  NetworkInterface iface = NetworkInterface.getByName(interfaceName);
  for (InterfaceAddress address : iface.getInterfaceAddresses()) {
    String ip = address.getAddress().getHostAddress()
    if (ip.length() <= 15) {
      return ip
    }
  }
}